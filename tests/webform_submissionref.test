<?php

/**
 * @file
 * Tests for module webform_submissionref.
 */

/**
 * Tests for module webform_submissionref.
 */
class WebformSubmissionReferenceTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Webform Submission Reference',
      'description' => 'Tests that module Webform Submission Reference works as expected.',
      'group' => 'Webform',
    );
  }

  private $user;
  private $source;
  private $target;

  function setUp() {
    parent::setUp('webform_submissionref');
    $this->user  = $this->drupalCreateUser(array(
      'access content',
      'access own webform results',
      'create webform content',
      'edit own webform content',
    ));
    $this->drupalLogin($this->user);
    $this->source = $this->drupalCreateNode(array('type' => 'webform'));
    $this->target = $this->drupalCreateNode(array('type' => 'webform'));
  }

  /**
   * Configuration UI.
   */
  function testUI() {
    // If I configure a webform, the component shows up.
    $this->drupalGet("node/{$this->source->nid}/webform");
    $this->assertResponse(200);
    $this->assertOption('add[type]', 'submissionref');
    // If I configure the component, all webforms show up.
    $edit = array(
      'add[name]' => 'my component',
      'add[type]' => 'submissionref',
    );
    $this->drupalPost(NULL, $edit, t('Add'));
    $this->assertResponse(200);
    $this->assertOption('submissionref[nid]', $this->source->nid);
    $this->assertOption('submissionref[nid]', $this->target->nid);
    $this->assertText($this->source->title);
    $this->assertText($this->target->title);
  }

  /**
   * Component behavior when we have no target results.
   */
  function testComponentNoTargetResults() {
    $target_text1  = $this->addWebformComponent($this->target, 'textfield');
    $target_text2  = $this->addWebformComponent($this->target, 'textfield');
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text1['cid']}][display]" => TRUE,
    ));
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertNoField("submitted[{$source_subref['form_key']}]");
  }

  /**
   * Component behavior when we have target results.
   */
  function testComponentTargetResults() {
    $target_text1  = $this->addWebformComponent($this->target, 'textfield');
    $target_text2  = $this->addWebformComponent($this->target, 'textfield');
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text1['cid']}][display]" => TRUE,
    ));
    $target_submission1 = array(
      $target_text1['form_key'] => $this->randomName(8),
      $target_text2['form_key'] => $this->randomName(8),
    );
    $target_submission2 = array(
      $target_text1['form_key'] => $this->randomName(8),
      $target_text2['form_key'] => $this->randomName(8),
    );
    $this->submitWebform($this->target, $target_submission1);
    $this->submitWebform($this->target, $target_submission2);
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertField("submitted[{$source_subref['form_key']}]");
    $this->assertText  ($target_submission1[$target_text1['form_key']]);
    $this->assertText  ($target_submission2[$target_text1['form_key']]);
    $this->assertNoText($target_submission1[$target_text2['form_key']]);
    $this->assertNoText($target_submission2[$target_text2['form_key']]);
  }

  /**
   * Component behavior when we display multiple fields.
   */
  function testComponentMultipleFields() {
    $target_text1  = $this->addWebformComponent($this->target, 'textfield');
    $target_text2  = $this->addWebformComponent($this->target, 'textfield');
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text1['cid']}][display]" => TRUE,
      "submissionref[node_{$this->target->nid}][components][{$target_text2['cid']}][display]" => TRUE,
    ));
    $target_submission1 = array(
      $target_text1['form_key'] => $this->randomName(8),
      $target_text2['form_key'] => $this->randomName(8),
    );
    $target_submission2 = array(
      $target_text1['form_key'] => $this->randomName(8),
      $target_text2['form_key'] => $this->randomName(8),
    );
    $this->submitWebform($this->target, $target_submission1);
    $this->submitWebform($this->target, $target_submission2);
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertField("submitted[{$source_subref['form_key']}]");
    $this->assertText($target_submission1[$target_text1['form_key']]);
    $this->assertText($target_submission2[$target_text1['form_key']]);
    $this->assertText($target_submission1[$target_text2['form_key']]);
    $this->assertText($target_submission2[$target_text2['form_key']]);
  }

  /**
   * Component behavior when we sort.
   */
  function testComponentFilter() {
    $target_text   = $this->addWebformComponent($this->target, 'textfield');
    $target_select = $this->addWebformComponent($this->target, 'select', array('extra[items]' => "yes|Yes\nno|No"));
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text['cid']}][display]" => TRUE,
      "submissionref[node_{$this->target->nid}][filters][{$target_select['cid']}]" => 'yes',
    ));
    $target_submission1 = array(
      $target_text['form_key'] => $this->randomName(8),
      $target_select['form_key'] => 'yes',
    );
    $target_submission2 = array(
      $target_text['form_key'] => $this->randomName(8),
      $target_select['form_key'] => 'no',
    );
    $this->submitWebform($this->target, $target_submission1);
    $this->submitWebform($this->target, $target_submission2);
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertField("submitted[{$source_subref['form_key']}]");
    $this->assertText  ($target_submission1[$target_text['form_key']]);
    $this->assertNoText($target_submission2[$target_text['form_key']]);
  }

  /**
   * Component behavior when we randomize.
   */
  function testComponentRandomize() {
    $target_text   = $this->addWebformComponent($this->target, 'textfield');
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text['cid']}][display]" => TRUE,
      'submissionref[options][randomize]' => TRUE,
    ));
    $target_submission1 = array($target_text['form_key'] => $this->randomName(8));
    $target_submission2 = array($target_text['form_key'] => $this->randomName(8));
    $this->submitWebform($this->target, $target_submission1);
    $this->submitWebform($this->target, $target_submission2);
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertField("submitted[{$source_subref['form_key']}]");
    $this->assertText($target_submission1[$target_text['form_key']]);
    $this->assertText($target_submission2[$target_text['form_key']]);
  }

  /**
   * Component behavior when we limit results.
   */
  function testComponentLimit() {
    $target_text   = $this->addWebformComponent($this->target, 'textfield');
    $source_subref = $this->addWebformComponent($this->source, 'submissionref', array(
      'submissionref[nid]' => $this->target->nid,
      "submissionref[node_{$this->target->nid}][components][{$target_text['cid']}][display]" => TRUE,
      'submissionref[options][limit]' => '1',
    ));
    $target_submission1 = array($target_text['form_key'] => $this->randomName(8));
    $target_submission2 = array($target_text['form_key'] => $this->randomName(8));
    $this->submitWebform($this->target, $target_submission1);
    $this->submitWebform($this->target, $target_submission2);
    $this->drupalGet('node/' . $this->source->nid);
    $this->assertResponse(200);
    $this->assertText($source_subref['name']);
    $this->assertField("submitted[{$source_subref['form_key']}]");
    $this->assertText  ($target_submission1[$target_text['form_key']]);
    $this->assertNoText($target_submission2[$target_text['form_key']]);
  }


  /**
   * Helper - Add a component to a webform.
   *
   * @param $node Webform node.
   * @param $type Component type.
   * @param $config Component configuration.
   *
   * @return Component.
   */
  function addWebformComponent($node, $type, $config = array()) {
    $this->drupalGet("node/$node->nid/webform");
    $this->assertResponse(200);
    $edit = array(
      'add[name]' => empty($config['name']) ? $this->randomName(8) : $config['name'],
      'add[type]' => $type,
    );
    $this->drupalPost(NULL, $edit, t('Add'));
    $this->assertResponse(200);
    $config['form_key'] = empty($config['form_key']) ? $this->randomName(8) : $config['form_key'];
    $this->drupalPost(NULL, $config, t('Save component'));
    $this->assertResponse(200);
    $node = node_load($node->nid, NULL, TRUE);
    $cid = $this->getCid($node, $config['form_key']);
    $this->assertTrue($cid);
    return $node->webform['components'][$cid];
  }

  /**
   * Helper - Submit webform.
   *
   * @param $node Webform node.
   * @param $values Submission values, keyed by component name.
   */
  function submitWebform($node, $values) {
    $this->drupalGet('node/' . $this->target->nid);
    $this->assertResponse(200);
    $edit = array();
    foreach ($values as $component => $value) {
      $edit["submitted[$component]"] = $value;
    }
    $this->drupalPost(NULL, $edit, t('Submit'));
    $this->assertResponse(200);
  }

  /**
   * Helper - Given a webform and the machine name of a component, return component id.
   *
   * @param $webform Webform node.
   * @param $name Component name.
   *
   * @return Component id if exists. FALSE otherwise.
   */
  function getCid($webform, $name) {
    foreach ($webform->webform['components'] as $cid => $component) {
      if ($component['form_key'] == $name) {
        return $cid;
      }
    }
    return FALSE;
  }

  /**
   * Helper - Assert that a select option exists.
   *
   * @param $name Name of select field to assert.
   * @param $option Option to assert.
   * @param $message Message to display.
   */
  function assertOption($name, $option, $message = '') {
    $elements = $this->xpath('//select[@name=:name]//option[@value=:option]', array(':name' => $name, ':option' => $option));
    return $this->assertFalse(empty($elements[0]), $message ? $message : t('Option @option for field @name exists.', array('@option' => $option, '@name' => $name)), t('Browser'));
  }

  /**
   * Helper - Assert that a select option does not exist.
   *
   * @param $name Name of select field to assert.
   * @param $option Option to assert.
   * @param $message Message to display.
   */
  function assertNoOption($name, $option, $message = '') {
    $elements = $this->xpath('//select[@name=:name]//option[@value=:option]', array(':name' => $name, ':option' => $option));
    return $this->assertTrue(empty($elements[0]), $message ? $message : t('Option @option for field @name does not exist.', array('@option' => $option, '@name' => $name)), t('Browser'));
  }


}

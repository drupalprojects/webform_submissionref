<?php

/**
 * @file
 * Webform submission reference module.
 */

/**
 * Implements hook_webform_component_info().
 */
function webform_submissionref_webform_component_info() {
  $components = array();
  $components['submissionref'] = array(
    'label' => t('Webform Submission'),
    'description' => t('Create a Webform Submission field.'),
    'features' => array(
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'conditional' => TRUE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
  );
  return $components;
}

/**
 * Implements _webform_defaults_component().
 */
function _webform_defaults_submissionref() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'pid' => 0,
    'weight' => 0,
    'value' => '',
    'mandatory' => 0,
    'extra' => array(
      'aslist' => NULL,
      'multiple' => NULL,
      'width' => '',
      'disabled' => FALSE,
      'countries' => '',
      'whitespace' => 0,
      'private' => FALSE,
    ),
  );
}

/**
 * Implements _webform_theme_component().
 */
function _webform_theme_submissionref() {
  return array(
    'webform_display_submissionref' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_submissionref($component) {
  $form = array();

  // Display extras.
  $form['display']['multiple'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple'),
    '#default_value' => $component['extra']['multiple'],
    '#description' => t('Check this option if the user should be allowed to choose multiple values.'),
    '#parents' => array('extra', 'multiple'),
  );
  $form['display']['aslist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Listbox'),
    '#default_value' => $component['extra']['aslist'],
    '#description' => t('Check this option if you want the component to be displayed as a select list box instead of radio buttons or checkboxes.'),
    '#parents' => array('extra', 'aslist'),
  );

  // Unserialize and set default values, if they have been set previsouly.
  $default_nid = $default_components = $default_filters = $default_options = NULL;
  if (!empty($component['value'])) {
    list($default_nid, $default_components, $default_filters, $default_options) = unserialize($component['value']);
  }

  // Prepare component edit form.
  $form['value'] = array(
    '#type' => 'hidden',
    '#default_value' => !empty($component['value']) ? $component['value'] : '',
  );

  // Build options from webform nodes.
  $query = new EntityFieldQuery();
  $query = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'webform')
    ->propertyOrderBy('title')
    ->execute();
  $nodes = empty($query['node']) ? array() : entity_load('node', array_keys($query['node']));
  $options = array();
  foreach ($nodes as $node) {
    if (node_access('update', $node)) {
      $options[$node->nid] = $node->title . ' [nid: ' . $node->nid . ']';
    }
  }

  // Display nid field.
  $form['submissionref'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform submission reference'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['submissionref']['nid'] = array(
    '#type' => 'select',
    '#title' => t('Webform node'),
    '#default_value' => isset($default_nid) ? $default_nid : '',
    '#options' => $options,
  );

  // Display components table + filters.
  foreach ($options as $nid => $title) {
    $form['submissionref']['node_' . $nid] = array(
      '#prefix' => "<div class=\"submissionref-components\" id=\"submissionref-components-$nid\">",
      '#suffix' => '</div>',
      'components' => array(
        '#theme' => array('webform_submissionref_components_table'),
        // Nid will be used in theme_webform_submissionref_components_table().
        'nid' => array(
          '#type' => 'hidden',
          '#value' => $nid,
        ),
      ),
      'filters' => array(
        '#type' => 'fieldset',
        '#title' => t('Filter submissions'),
        '#collapsible' => TRUE,
        '#collapsed' => empty($default_filters),
        '#attributes' => array('class' => array('container-inline')),
      ),
    );
  }
  // Display options.
  $form['submissionref']['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($default_options),
    'randomize' => array(
      '#type' => 'checkbox',
      '#title' => t('Randomize submissions'),
      '#default_value' => isset($default_options['randomize']) ? $default_options['randomize'] : FALSE,
    ),
    'limit' => array(
      '#type' => 'textfield',
      '#title' => t('Limit number of submissions'),
      '#description' => t('Set 0 if all submissions should be displayed'),
      '#default_value' => isset($default_options['limit']) ? $default_options['limit'] : '0',
      '#element_validate' => array('webform_submissionref_limit_validate'),
    ),
  );

  // Add JS to display components depending on the selected node.
  $js = <<<EOT
  jQuery(document).ready(function($) {
    $('select[name="submissionref[nid]"]').change(function() {
      $('.submissionref-components').hide();
      $('#submissionref-components-' + this.value).show();
    });
    $('select[name="submissionref[nid]"]').change();
  });
EOT;
  drupal_add_js($js, 'inline');

  // Fill up components table + filters.
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'webform')
    ->execute();
  $nids = array();
  foreach ($entities['node'] as $entity) {
    $nids[] = $entity->nid;
  }
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    foreach ($node->webform['components'] as $component) {
      $nid = $component['nid'];
      $cid = $component['cid'];
      // If component belongs to default webform, then set its default values.
      if (($nid == $default_nid) && array_key_exists($cid, $default_components)) {
        $default_display = $default_components[$cid]['display'];
        $default_weight  = $default_components[$cid]['weight'];
      } else {
        $default_display = FALSE;
        $default_weight  = 0;
      }
      $form['submissionref']['node_' . $nid]['components'][$cid] = array(
        '#weight' => $default_weight,
        'name' => array(
          '#markup' => $component['name'],
        ),
        'display' => array(
          '#type' => 'checkbox',
          '#default_value' => $default_display,
        ),
        'weight' => array(
          '#type' => 'weight',
          '#default_value' => $default_weight,
        ),
      );

      if ($component['type'] == 'select') {
        module_load_include('inc', 'webform', 'components/select');
        $form['submissionref']['node_' . $nid]['filters'][$cid] = array(
          '#type' => 'select',
          '#title' => $component['name'],
          '#options' => array('0' => t('- No filter -')) + _webform_select_options($component),
          '#default_value' => isset($default_filters[$cid]) ? $default_filters[$cid] : '',
        );
      }
    }
  }

  return $form;
}

/**
 * Validate that limit entered is a positive integer.
 */
function webform_submissionref_limit_validate($element, &$form_state) {
  $limit = $element['#value'];
  // $limit is a string - is_numeric makes sure it actually contains a number.
  if (!is_numeric($limit) || !is_int((int) $limit) || ($limit < 0)) {
    form_error($element, t('The limit must be a positive integer.'));
  }
}


/**
 * Implements _webform_render_component().
 *
 * Displayed when viewing the node e.g. node/1.
 */
function _webform_render_submissionref($component, $value = NULL, $filter = TRUE) {
  // Get component values.
  list($nid, $components, $filters_set, $options_set) = unserialize($component['value']);

  // Get submitted data.
  $submissions = webform_get_submissions($nid);
  
  // Apply filters.
  foreach ($submissions as $sid => $submission) {
    foreach ($filters_set as $cid => $filter_value) {
      // If filter component does not exist, remove submission.
      // If filter component exists but values do not match, remove submission.
      if (!isset($submission->data[$cid])
      || (isset($submission->data[$cid]) && $submission->data[$cid][0] != $filter_value)) {
        unset($submissions[$sid]);
      }
    }
  }

  // Apply randomize option.
  if (isset($options_set['randomize'])) {
    module_load_include('inc', 'webform', 'components/select');
    _webform_shuffle_options($submissions);
  }

  // Apply limit option.
  // Do not limit options on POST to make sure form validation is checked against all submissions.
  // This is to avoid 'Illegal Choice' warnings.
  if (isset($options_set['limit']) && empty($_POST)) {
    if (empty($value)) {
      // On node/X, simply get the first submissions.
      $submissions = array_slice($submissions, 0, $options_set['limit']);
    }
    else {
      // On node/X/submission/X/edit, suggest at least the original submissions.
      // This ensures that the default value will not be an illegal choice.
      $original_sids = array_filter($value);
      $submissions_original = array();
      // Looping over $submissions will not scale well, but there is no other way to filter $submissions based on $original_sids.
      foreach ($submissions as $key => $submission) {
        if (in_array($submission->sid, $original_sids)) {
          $submissions_original[] = $submission;
          unset($submissions[$key]);
        }
      }
      $submissions_new = array_slice($submissions, 0, $options_set['limit'] - count($submissions_original));
      $submissions = array_merge($submissions_original, $submissions_new);
    }
  }

  // Build options from submitted data.
  $options = array();
  $webform = node_load($nid);
  $author = user_load($webform->uid);
  foreach ($submissions as $submission) {
    // Display submission only if author can access it.
    if (webform_submission_access($webform, $submission, 'view', $author)) {
      $options[$submission->sid] = array();
      // 1. Radio/checkbox display: render option as HTML.
      if (empty($component['extra']['aslist'])) {
        $renderable = webform_submission_render($webform, $submission, NULL, 'html');
        foreach ($components as $cid => $c) {
          // Make sure the component must be display and still exists.
          if ($c['display'] && isset($submission->data[$cid])) {
            $name = $webform->webform['components'][$cid]['form_key'];
            $element = $renderable[$name];
            $element['#title'] = '';
            // Define hook_webform_submissionref_component_alter().
            drupal_alter('webform_submissionref_component', $element, $webform, $submission, $cid);
            $element['#weight'] = $c['weight'];
            $options[$submission->sid][$cid] = $element;
          }
        }
        $options[$submission->sid] = drupal_render($options[$submission->sid]);
      }
      // 2. Listbox display: render option as raw, plain text.
      else {
        $option = '';
        uasort($components, 'drupal_sort_weight');
        foreach ($components as $cid => $c) {
          // Make sure the component must be display and still exists.
          if ($c['display'] && isset($submission->data[$cid])) {
            // Use space as an arbitraty glue. Using tokens might be more elegant but would require a different UI.
            $option .= empty($option) ? '' : ' ';
            $option .= implode($submission->data[$cid], ' ');
          }
        }
        $options[$submission->sid] = $option;
        // Sort options for a better user experience. Unless user explicitely wants to randomize.
        if (empty($options_set['randomize'])) {
          natsort($options);
        }
      }
    }
  }

  // Build form element.
  $element = array(
    '#title' => $filter ? _webform_filter_xss($component['name']) : $component['name'],
    '#title_display' => $component['extra']['title_display'] ? $component['extra']['title_display'] : 'before',
    '#description' => isset($component['extra']['description']) ? $component['extra']['description'] : '',
    '#options' => $options,
    '#required' => $component['mandatory'],
    '#weight' => $component['weight'],
    '#theme_wrappers' => array('webform_element'),
    '#pre_render' => array(), // Needed to disable double-wrapping.
    '#translatable' => array('title', 'description'),
  );

  // Set type of form component. See _webform_render_select().
  if (empty($component['extra']['aslist'])) {
    $element['#type'] = empty($component['extra']['multiple']) ? 'radios' : 'checkboxes';
  }
  else {
    $element['#type'] = 'select';
    if (!empty($component['extra']['multiple'])) {
      $element['#size'] = 4;
      $element['#multiple'] = TRUE;
    }
  }

  // Set default value.
  if (empty($component['extra']['multiple'])) {
    $element['#default_value'] = isset($value[0]) ? $value[0] : NULL;
  }
  else {
    $element['#default_value'] = isset($value) ? $value : array();
  }

  return $element;
}

/**
 * Implements _webform_display_component().
 *
 * Displayed when viewing a submission e.g. node/1/submission/1.
 */
function _webform_display_submissionref($component, $value, $format = 'html') {
  // Generate markup.
  if (empty($value)) {
    $markup = '';
  }
  else {
    list($nid, $components, $filters, $options) = unserialize($component['value']);
    $markup = array();
    foreach (array_filter($value) as $sid) {
      $markup[] = l(t('Submission #@sid', array('@sid' => $sid)), "node/$nid/submission/$sid");
    }
    $markup = implode($markup, ', ');
  }

  // Build form element.
  $element = array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_submissionref',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#format' => $format,
    '#value' => $markup,
    '#translatable' => array('title'),
  );
  return $element;
}

/**
 * Custom Theme function for collected Webform Submission Reference data.
 */
function theme_webform_display_submissionref($variables) {
  $element = $variables['element'];
  $value = $element['#value'];
  return $value;
}


/**
 * Implements _webform_table_component().
 *
 * Displayed when viewing the results table i.e. node/1/webform-results/table.
 */
function _webform_table_submissionref($component, $value) {
  if (empty($value)) {
    return '';
  }
  list($nid, $components, $filters, $options) = unserialize($component['value']);
  $markup = array();
  foreach (array_filter($value) as $sid) {
    $markup[] = l(t('Submission #@sid', array('@sid' => $sid)), "node/$nid/submission/$sid");
  }
  return implode($markup, ', ');
}

/**
 * Implements _webform_csv_headers_component().
 */
function _webform_csv_headers_submissionref($component, $export_options) {
  $header = array();
  $header[0] = '';
  $header[1] = '';
  $header[2] = $component['name'];
  return $header;
}

/**
 * Implements _webform_csv_data_component().
 */
function _webform_csv_data_submissionref($component, $export_options, $value) {
  if (empty($value)) {
    return '';
  }
  list($nid, $components, $filters, $options) = unserialize($component['value']);
  $markup = array();
  foreach (array_filter($value) as $sid) {
    $markup[] = t('Submission #@sid', array('@sid' => $sid));
  }
  return implode($markup, ', ');
}


/**
 * Implements hook_form_alter().
 */
function webform_submissionref_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'webform_component_edit_form' && isset($form['submissionref'])) {
    // Add our custom submit function.
    // Use array_unshift - our function must run before webform's.
    array_unshift($form['#submit'], 'webform_submissionref_edit_form_submit');
    $form['#validate'][] = 'webform_submissionref_edit_form_validate';
  }
}

/**
 * Validation handler.
 *
 * At least 1 component should be selected.
 */
function webform_submissionref_edit_form_validate($form, $form_state) {
  $element_selected = FALSE;
  $nid = $form_state['values']['submissionref']['nid'];
  // The verification applies only to components that belong to the selected node.
  $components = $form_state['values']['submissionref']['node_' . $nid]['components'];
  foreach ($components as $component) {
    if ($component['display']) {
      $element_selected = TRUE;
      break;
    }
  }
  if (!$element_selected) {
    form_set_error("submissionref[node_$nid][components]", t('Please select one or more component(s) to display.'));
  }
}


/**
 * Submit handler.
 *
 * Fill up component value by serializing user submitted data.
 */
function webform_submissionref_edit_form_submit($form, &$form_state) {
  // Get webform nid.
  $nid = $form_state['values']['submissionref']['nid'];
  // Get components (remove hidden field nid).
  $components = $form_state['values']['submissionref']['node_' . $nid]['components'];
  unset($components['nid']);
  // Get filters set by the user.
  $filters_set = array();
  if (isset($form_state['values']['submissionref']['node_' . $nid]['filters'])) {
    $filters = $form_state['values']['submissionref']['node_' . $nid]['filters'];
    foreach ($filters as $cid => $value) {
      if ($value) {
        $filters_set[$cid] = $value;
      }
    }
  }
  // Get options set by the user.
  $options = $form_state['values']['submissionref']['options'];
  foreach ($options as $key => $value) {
    if (empty($value)) {
      unset($options[$key]);
    }
  }
  // Serialize values and store it in component value.
  // The order of the values matters - they will be retrieved with list().
  $value = array($nid, $components, $filters_set, $options);
  $form_state['values']['value'] = serialize($value);
}

/**
 * Implements hook_theme().
 */
function webform_submissionref_theme($existing, $type, $theme, $path) {
  return array(
    'webform_submissionref_components_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for component edit form.
 *
 * Creates the tabledrag.
 */
function theme_webform_submissionref_components_table($variables) {
  $element = $variables['element'];
  $nid = $element['nid']['#value'];

  $weight_class = 'submissionref-components-weight';

  $header = array(t('Component'), t('Display'), t('Weight'));
 
  $rows = array();
  foreach (element_children($element, TRUE) as $key) {
    // We don't want to process hidden key 'nid'.
    // -> make sure we process only numeric keys.
    if (!is_numeric($key)) {
      continue;
    }
    $element[$key]['weight']['#attributes']['class'] = array($weight_class);
    $data = array();
    $rows[] = array(
      'data' => array(
        drupal_render($element[$key]['name']),
        drupal_render($element[$key]['display']),
        drupal_render($element[$key]['weight']),
      ),
      'class' => array('draggable'),
    );
  }

  $table_id = "submissionref-components-$nid-table";

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));
 
  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);

  return $output;
}
